"use strict";exports.id=367,exports.ids=[367],exports.modules={9367:(e,t,r)=>{async function o(e,t){let r=process.env.HF_API_KEY;if(!r)return console.error("HF_API_KEY environment variable not set"),0;try{let n=await fetch("https://api-inference.huggingface.co/models/sentence-transformers/all-mpnet-base-v2",{method:"POST",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify({inputs:{source_sentence:e.toLowerCase().trim(),sentences:[t.toLowerCase().trim()]}})});if(!n.ok){if(503===n.status)return console.warn("HF model loading, retrying in 5 seconds..."),await new Promise(e=>setTimeout(e,5e3)),o(e,t);throw Error(`HF API Error: ${n.status}`)}return(await n.json())[0]||0}catch(e){return console.error("Semantic similarity error:",e),0}}async function n(e,t){let r=e.toLowerCase().trim(),n=t.toLowerCase().trim();if(r===n)return{similarity:1,isMatch:!0,method:"exact",confidence:100};if(await i(r,n))return{similarity:.95,isMatch:!0,method:"synonym",confidence:95};try{let e=await o(r,n);return await s("theme"),{similarity:e,isMatch:e>=.7,method:"semantic",confidence:Math.round(100*e)}}catch(e){return{similarity:0,isMatch:!1,method:"error",confidence:0,error:e instanceof Error?e.message:"Unknown error"}}}async function i(e,t){return(({"drinking alcohol":["boozing","drinking","alcohol","beverages","spirits","liquor","wine","beer"],emotions:["feelings","moods","sentiments","emotional","feeling"],space:["cosmos","universe","astronomy","celestial","cosmic","stellar"],mythology:["legends","folklore","myths","mythical","legendary"],transportation:["cars","vehicles","travel","transport","automotive"],literature:["books","reading","writing","stories","literary"],food:["eating","cuisine","cooking","culinary","nutrition"],music:["songs","musical","sound","audio","melody"],nature:["natural","outdoors","environment","wildlife","earth"],technology:["tech","digital","computers","electronic","innovation"]})[t]||[]).includes(e)}async function s(e){try{console.log(`[Semantic API] ${e} matching request at ${new Date().toISOString()}`)}catch(e){console.error("Usage logging error:",e)}}r.d(t,{computeSemanticSimilarity:()=>o,matchThemeWithFuzzy:()=>n})}};