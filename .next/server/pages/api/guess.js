"use strict";(()=>{var e={};e.id=310,e.ids=[310],e.modules={2885:e=>{e.exports=require("@supabase/supabase-js")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},9926:e=>{e.exports=import("zod")},6249:(e,s)=>{Object.defineProperty(s,"l",{enumerable:!0,get:function(){return function e(s,r){return r in s?s[r]:"then"in s&&"function"==typeof s.then?s.then(s=>e(s,r)):"function"==typeof s&&"default"===r?s:void 0}}})},141:(e,s,r)=>{r.a(e,async(e,t)=>{try{r.r(s),r.d(s,{config:()=>u,default:()=>d,routeModule:()=>c});var o=r(1802),a=r(7153),i=r(6249),n=r(5274),l=e([n]);n=(l.then?(await l)():l)[0];let d=(0,i.l)(n,"default"),u=(0,i.l)(n,"config"),c=new o.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/guess",pathname:"/api/guess",bundlePath:"",filename:""},userland:n});t()}catch(e){t(e)}})},7274:(e,s,r)=>{r.d(s,{o:()=>t});function t(e){return async(s,r)=>{if(r.setHeader("Access-Control-Allow-Origin","*"),r.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS"),r.setHeader("Access-Control-Allow-Headers","Content-Type, Player-ID, Authorization"),"OPTIONS"===s.method){r.status(204).end();return}return e(s,r)}}},5274:(e,s,r)=>{r.a(e,async(e,t)=>{try{r.r(s),r.d(s,{default:()=>_});var o=r(2885),a=r(9085);r(8355);var i=r(7274),n=r(2693),l=r(3562),d=r(9462),u=e([a,d]);if([a,d]=u.then?(await u)():u,!a.O.SUPABASE_URL)throw console.error("❌ Missing SUPABASE_URL in env"),Error("Missing SUPABASE_URL");if(!a.O.SUPABASE_SERVICE_ROLE_KEY)throw console.error("❌ Missing SUPABASE_SERVICE_ROLE_KEY in env"),Error("Missing SUPABASE_SERVICE_ROLE_KEY");if(!a.O.DB_PROVIDER)throw console.error("❌ Missing DB_PROVIDER in env"),Error("Missing DB_PROVIDER");console.log("[/api/guess] Environment validation passed:",{hasSupabaseUrl:!!a.O.SUPABASE_URL,hasServiceRoleKey:!!a.O.SUPABASE_SERVICE_ROLE_KEY,dbProvider:a.O.DB_PROVIDER,nodeEnv:a.O.NODE_ENV});let p=(0,o.createClient)(a.O.SUPABASE_URL,a.O.SUPABASE_SERVICE_ROLE_KEY);async function c(e,s,r,t,o){if(!t)throw Error("Completion time is required for updating stats");let{data:a,error:i}=await p.from("user_stats").select("*").eq("player_id",e).single();if(i)throw console.error("[updateUserStats] Failed to fetch stats:",i),i;let n={games_played:(a?.games_played||0)+1,games_won:s?(a?.games_won||0)+1:a?.games_won||0,current_streak:s?(a?.current_streak||0)+1:0,longest_streak:s?Math.max(a?.longest_streak||0,(a?.current_streak||0)+1):a?.longest_streak||0,total_guesses:(a?.total_guesses||0)+r,average_guesses_per_game:((a?.total_guesses||0)+r)/((a?.games_played||0)+1),total_play_time_seconds:(a?.total_play_time_seconds||0)+t,total_score:(a?.total_score||0)+o.score,updated_at:new Date().toISOString()},{error:l}=await p.from("user_stats").update(n).eq("player_id",e);if(l)throw console.error("[updateUserStats] Failed to update stats:",l),l;return n}async function g(e,s,r,t,o,a){if(!t)throw Error("Completion time is required for creating score entry");let{error:i}=await p.from("scores").insert([{player_id:e,word_id:s,guesses_used:r,completion_time_seconds:t,correct:o,score:a.score,base_score:a.baseScore,guess_penalty:a.guessPenalty,time_penalty:a.timePenalty,hint_penalty:a.hintPenalty,submitted_at:new Date().toISOString()}]);if(i)throw console.error("[createScoreEntry] Failed to create score:",i),i}async function m(e,s,r,t,o){if(!t)throw Error("Completion time is required for updating leaderboard");console.log("[updateLeaderboardSummary] Starting leaderboard update:",{playerId:e,wordId:s,guessesUsed:r,completionTimeSeconds:t,score:o.score});try{await (0,d.Y0)(e),console.log("[updateLeaderboardSummary] Player existence confirmed");let{error:a}=await p.from("user_stats").upsert([{player_id:e,current_streak:0,longest_streak:0,best_rank:null,top_10_count:0}],{onConflict:"player_id",ignoreDuplicates:!0});if(a)throw console.error("[updateLeaderboardSummary] Failed to ensure user_stats entry:",a),a;let{data:i,error:n}=await p.from("leaderboard_summary").select("*").eq("word_id",s).order("best_time",{ascending:!0}).order("guesses_used",{ascending:!0}).limit(10);if(n)throw console.error("[updateLeaderboardSummary] Failed to fetch existing leaderboard:",n),n;if(console.log("[updateLeaderboardSummary] Current leaderboard entries:",i?.length||0),o.score>0){console.log("[updateLeaderboardSummary] Inserting leaderboard entry for completion time:",t);let{error:o}=await p.from("leaderboard_summary").upsert([{player_id:e,word_id:s,rank:1,was_top_10:!0,best_time:t,guesses_used:r,date:new Date().toISOString().split("T")[0]}],{onConflict:"player_id,word_id"});if(o)throw console.error("[updateLeaderboardSummary] Failed to insert/update leaderboard entry:",{error:o,code:o.code,message:o.message,details:o.details,hint:o.hint,playerId:e,wordId:s}),o;console.log("[updateLeaderboardSummary] Successfully inserted/updated leaderboard entry")}else console.log("[updateLeaderboardSummary] Skipping leaderboard entry for zero score")}catch(r){throw console.error("[updateLeaderboardSummary] Error in leaderboard update:",{error:r,message:r instanceof Error?r.message:"Unknown error",playerId:e,wordId:s,scoreResult:o}),r}}let _=(0,i.o)(async function(e,s){if("POST"!==e.method)return s.status(405).json({error:"Method not allowed"});try{let{guess:r,gameId:t,wordId:o,start_time:a}=e.body,i=e.headers["player-id"]??"anonymous";if(console.log("[/api/guess] Processing guess:",{guess:r,gameId:t,playerId:i,wordId:o}),!t||!o||!a||!r||!i){let e={gameId:t,wordId:o,playerId:i,guess:r,start_time:a},n=Object.entries(e).filter(([e,s])=>!s).map(([e,s])=>e);return console.error("[/api/guess] Missing required fields:",n),s.status(400).json({error:"Missing required fields",details:{missing:n,received:e,required:["gameId","wordId","playerId","guess","start_time"]}})}if("string"!=typeof r||0===r.trim().length)return s.status(400).json({error:"Invalid guess format",details:{guess:r,expected:"non-empty string"}});if("string"!=typeof t||"string"!=typeof o)return s.status(400).json({error:"Invalid ID format",details:{gameId:t,wordId:o,expected:"string UUIDs"}});if("string"!=typeof a||!Date.parse(a))return s.status(400).json({error:"Invalid start_time format",details:{start_time:a,expected:"ISO date string"}});console.log("[/api/guess] Looking for game session:",{gameId:t,wordId:o,playerId:i});let{data:u,error:_}=await p.from("game_sessions").select("id, player_id, word_id, start_time, created_at").eq("player_id",i).order("created_at",{ascending:!1}).limit(5);console.log("[/api/guess] Recent sessions for player:",{playerId:i,sessionCount:u?.length||0,sessions:u,allError:_?.message});let{data:f,error:y}=await p.from("game_sessions").select("*").eq("id",t).single();console.log("[/api/guess] Session lookup by gameId only:",{found:!!f,sessionPlayerId:f?.player_id,requestPlayerId:i,playerMatch:f?.player_id===i,anyError:y?.message});let{data:E,error:w}=await p.from("game_sessions").select("*").eq("id",t).eq("player_id",i).single();if(console.log("[/api/guess] Session lookup with player validation:",{hasBasicSession:!!E,basicSessionId:E?.id,basicSessionWordId:E?.word_id,basicSessionPlayerId:E?.player_id,basicError:w?.message}),w){if(console.error("[/api/guess] Session lookup failed:",{error:w,code:w.code,details:w.details,hint:w.hint,gameId:t,wordId:o,playerId:i,sessionExistsButWrongPlayer:!!f&&f.player_id!==i}),f&&f.player_id!==i)return s.status(403).json({error:"Session belongs to different player",details:{gameId:t,sessionPlayerId:f.player_id,requestPlayerId:i}});return s.status(404).json({error:"Game session not found",details:{gameId:t,playerId:i,error:w.message,code:w.code,allSessions:u?.length||0}})}if(!E)return s.status(404).json({error:"Game session not found",details:{gameId:t,playerId:i,allSessions:u?.length||0,sessionExistsButWrongPlayer:!!f}});if(E.word_id!==o)return console.error("[/api/guess] Word ID mismatch:",{sessionWordId:E.word_id,requestWordId:o}),s.status(404).json({error:"Word ID mismatch",details:{sessionWordId:E.word_id,requestWordId:o}});let{data:S,error:h}=await p.from("game_sessions").select(`
        id,
        word_id,
        revealed_clues,
        guesses,
        is_complete,
        start_time,
        clue_status,
        words (
          word,
          definition,
          etymology,
          first_letter,
          in_a_sentence,
          number_of_letters,
          equivalents,
          difficulty,
          date
        )
      `).eq("id",t).single();if(console.log("[/api/guess] Full session with join result:",{hasGameSession:!!S,sessionError:h?.message,sessionErrorCode:h?.code,sessionErrorDetails:h?.details,gameSessionWordId:S?.word_id}),h||!S){if(console.error("[/api/guess] Failed to fetch game session with join:",{error:h,details:h?.details,hint:h?.hint,code:h?.code,gameId:t,wordId:o,playerId:i,basicSessionExists:!!E,basicSessionWordId:E?.word_id}),E){console.log("[/api/guess] Basic session exists, trying without words join...");let{data:e,error:o}=await p.from("words").select("word, definition, etymology, first_letter, in_a_sentence, number_of_letters, equivalents, difficulty, date").eq("id",E.word_id).single();if(console.log("[/api/guess] Word lookup result:",{hasWord:!!e,wordError:o?.message,wordId:E.word_id}),o||!e)return s.status(500).json({error:"Failed to fetch word data",details:{wordId:E.word_id,wordError:o?.message}});let u={...E,words:e};if(console.log("[/api/guess] Using combined session data"),u.is_complete)return s.status(400).json({error:"Game session is already complete"});if(u.start_time!==a)return console.error("[/api/guess] Start time mismatch:",{session:u.start_time,request:a}),s.status(400).json({error:"Invalid start time",details:"Start time does not match game session"});let _=await (0,n.E)({guess:r,gameId:t,playerId:i,wordId:u.word_id,start_time:u.start_time},u.words.word,u.revealed_clues||[]),f=_.gameOver?Math.floor((Date.now()-new Date(u.start_time).getTime())/1e3):null,y=_.gameOver?(0,l.m)({guessesUsed:(u.guesses||[]).length+1,completionTimeSeconds:f||0,usedHint:!1,isWon:_.isCorrect}):null,w={guesses:[...u.guesses||[],_.guess],revealed_clues:_.revealedClues,clue_status:_.revealedClues.reduce((e,s)=>({...e,[s]:!0}),u.clue_status||{}),is_complete:_.gameOver,is_won:_.isCorrect,end_time:_.gameOver?new Date().toISOString():null,updated_at:new Date().toISOString()};console.log("[/api/guess] Updating session with data:",{gameId:t,updateData:w,originalGuesses:u.guesses,newGuess:_.guess});let{error:S}=await p.from("game_sessions").update(w).eq("id",t);if(S)return console.error("[/api/guess] Failed to update game session:",{error:S,message:S.message,code:S.code,details:S.details,hint:S.hint,gameId:t,updateData:w}),s.status(500).json({error:"Failed to update game session",details:{message:S.message,code:S.code}});if(_.gameOver&&f&&y){let e;console.log("[/api/guess] Game completed, updating stats and scores:",{playerId:i,isCorrect:_.isCorrect,guessesUsed:u.guesses.length+1,completionTimeSeconds:f,scoreResult:{score:y.score,baseScore:y.baseScore,guessPenalty:y.guessPenalty,timePenalty:y.timePenalty,hintPenalty:y.hintPenalty}});try{if(!i)return console.error("[/api/guess] Missing player ID"),s.status(200).json({..._,score:y,stats:void 0});console.log("[/api/guess] Step 1: Ensuring player exists for player ID:",i);try{await (0,d.Y0)(i),console.log("[/api/guess] ✅ Step 1 completed: Player existence confirmed")}catch(e){return console.error("[/api/guess] ❌ Step 1 failed: ensurePlayerExists error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i}),s.status(200).json({..._,score:y,stats:void 0})}if(!u?.word_id)return console.error("[/api/guess] Missing word_id in session"),s.status(200).json({..._,score:y,stats:void 0});if("number"!=typeof f||f<0)return console.error("[/api/guess] Invalid completion time:",f),s.status(200).json({..._,score:y,stats:void 0});console.log("[/api/guess] Step 2: Updating user stats");try{e=await c(i,_.isCorrect,u.guesses.length+1,f,y),console.log("[/api/guess] ✅ Step 2 completed: User stats updated successfully")}catch(e){throw console.error("[/api/guess] ❌ Step 2 failed: updateUserStats error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i,wordId:u.word_id}),e}console.log("[/api/guess] Step 3: Creating score entry");try{await g(i,u.word_id,u.guesses.length+1,f,_.isCorrect,y),console.log("[/api/guess] ✅ Step 3 completed: Score entry created successfully")}catch(e){throw console.error("[/api/guess] ❌ Step 3 failed: createScoreEntry error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i,wordId:u.word_id,scoreResult:y}),e}console.log("[/api/guess] Step 4: Updating leaderboard summary");try{await m(i,u.word_id,u.guesses.length+1,f,y),console.log("[/api/guess] ✅ Step 4 completed: Leaderboard updated successfully")}catch(e){throw console.error("[/api/guess] ❌ Step 4 failed: updateLeaderboardSummary error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i,wordId:u.word_id,scoreResult:y}),e}return console.log("[/api/guess] \uD83C\uDF89 All completion steps successful! Game stats and leaderboard updated."),s.status(200).json({..._,score:y,stats:e})}catch(e){return console.error("[/api/guess] \uD83D\uDCA5 Final catch: Failed in completion logic:",{error:e,message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0,playerId:i,wordId:u.word_id,scoreResult:y,step:"unknown"}),s.status(200).json({..._,score:y,stats:void 0})}}return s.status(200).json(_)}return s.status(404).json({error:"Game session not found",details:"Invalid game session or word ID"})}if(S.is_complete)return s.status(400).json({error:"Game session is already complete"});if(S.start_time!==a)return console.error("[/api/guess] Start time mismatch:",{session:S.start_time,request:a}),s.status(400).json({error:"Invalid start time",details:"Start time does not match game session"});let I=await (0,n.E)({guess:r,gameId:t,playerId:i,wordId:S.word_id,start_time:S.start_time},S.words.word,S.revealed_clues||[]),P=I.gameOver?Math.floor((Date.now()-new Date(S.start_time).getTime())/1e3):null,b=I.gameOver?(0,l.m)({guessesUsed:(S.guesses||[]).length+1,completionTimeSeconds:P||0,usedHint:!1,isWon:I.isCorrect}):null,v={guesses:[...S.guesses||[],I.guess],revealed_clues:I.revealedClues,clue_status:I.revealedClues.reduce((e,s)=>({...e,[s]:!0}),S.clue_status||{}),is_complete:I.gameOver,is_won:I.isCorrect,end_time:I.gameOver?new Date().toISOString():null,updated_at:new Date().toISOString()};console.log("[/api/guess] Updating session with data:",{gameId:t,updateData:v,originalGuesses:S.guesses,newGuess:I.guess});let{error:A}=await p.from("game_sessions").update(v).eq("id",t);if(A)return console.error("[/api/guess] Failed to update game session:",{error:A,message:A.message,code:A.code,details:A.details,hint:A.hint,gameId:t,updateData:v}),s.status(500).json({error:"Failed to update game session",details:{message:A.message,code:A.code}});if(I.gameOver&&P&&b){let e;console.log("[/api/guess] Game completed, updating stats and scores:",{playerId:i,isCorrect:I.isCorrect,guessesUsed:S.guesses.length+1,completionTimeSeconds:P,scoreResult:{score:b.score,baseScore:b.baseScore,guessPenalty:b.guessPenalty,timePenalty:b.timePenalty,hintPenalty:b.hintPenalty}});try{if(!i)return console.error("[/api/guess] Missing player ID"),s.status(200).json({...I,score:b,stats:void 0});console.log("[/api/guess] Step 1: Ensuring player exists for player ID:",i);try{await (0,d.Y0)(i),console.log("[/api/guess] ✅ Step 1 completed: Player existence confirmed")}catch(e){return console.error("[/api/guess] ❌ Step 1 failed: ensurePlayerExists error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i}),s.status(200).json({...I,score:b,stats:void 0})}if(!S?.word_id)return console.error("[/api/guess] Missing word_id in session"),s.status(200).json({...I,score:b,stats:void 0});if("number"!=typeof P||P<0)return console.error("[/api/guess] Invalid completion time:",P),s.status(200).json({...I,score:b,stats:void 0});console.log("[/api/guess] Step 2: Updating user stats");try{e=await c(i,I.isCorrect,S.guesses.length+1,P,b),console.log("[/api/guess] ✅ Step 2 completed: User stats updated successfully")}catch(e){throw console.error("[/api/guess] ❌ Step 2 failed: updateUserStats error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i,wordId:S.word_id}),e}console.log("[/api/guess] Step 3: Creating score entry");try{await g(i,S.word_id,S.guesses.length+1,P,I.isCorrect,b),console.log("[/api/guess] ✅ Step 3 completed: Score entry created successfully")}catch(e){throw console.error("[/api/guess] ❌ Step 3 failed: createScoreEntry error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i,wordId:S.word_id,scoreResult:b}),e}console.log("[/api/guess] Step 4: Updating leaderboard summary");try{await m(i,S.word_id,S.guesses.length+1,P,b),console.log("[/api/guess] ✅ Step 4 completed: Leaderboard updated successfully")}catch(e){throw console.error("[/api/guess] ❌ Step 4 failed: updateLeaderboardSummary error:",{error:e,message:e instanceof Error?e.message:"Unknown error",code:e?.code,details:e?.details,playerId:i,wordId:S.word_id,scoreResult:b}),e}return console.log("[/api/guess] \uD83C\uDF89 All completion steps successful! Game stats and leaderboard updated."),s.status(200).json({...I,score:b,stats:e})}catch(e){return console.error("[/api/guess] \uD83D\uDCA5 Final catch: Failed in completion logic:",{error:e,message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0,playerId:i,wordId:S.word_id,scoreResult:b,step:"unknown"}),s.status(200).json({...I,score:b,stats:void 0})}}s.status(200).json(I)}catch(e){console.error("[/api/guess] Error:",e),s.status(500).json({error:"Failed to submit guess"})}});t()}catch(e){t(e)}})},8355:(e,s,r)=>{r.d(s,{DD:()=>t,E6:()=>o,b6:()=>a});let t=["definition","equivalents","first_letter","in_a_sentence","number_of_letters","etymology"];function o(){return{definition:!1,equivalents:!1,first_letter:!1,in_a_sentence:!1,number_of_letters:!1,etymology:!1}}function a(e){if(e.length>t.length)return!1;for(let s=0;s<e.length;s++)if(e[s]!==t[s])return!1;return!0}if(6!==t.length)throw Error("CLUE_SEQUENCE must contain exactly 6 clues");if(new Set(t).size!==t.length)throw Error("CLUE_SEQUENCE contains duplicate clues");for(let[e,s]of Object.entries({D:"definition",E:"equivalents",F:"first_letter",I:"in_a_sentence",N:"number_of_letters",E2:"etymology"}))if(!t.includes(s))throw Error(`Invalid clue key mapping: ${e} -> ${s}`)},3562:(e,s,r)=>{r.d(s,{m:()=>o});let t={BASE_SCORE:1e3,GUESS_PENALTY:100,TIME_PENALTY_PER_10_SECONDS:10,HINT_PENALTY:200};function o(e){let{guessesUsed:s,completionTimeSeconds:r,usedHint:o,isWon:a}=e;if(!a)return{score:0,baseScore:t.BASE_SCORE,guessPenalty:0,timePenalty:0,hintPenalty:0};let i=Math.max(0,(s-1)*t.GUESS_PENALTY),n=Math.floor(r/10)*t.TIME_PENALTY_PER_10_SECONDS,l=o?t.HINT_PENALTY:0;return{score:Math.max(0,t.BASE_SCORE-i-n-l),baseScore:t.BASE_SCORE,guessPenalty:i,timePenalty:n,hintPenalty:l}}},9085:(e,s,r)=>{r.a(e,async(e,t)=>{try{r.d(s,{O:()=>n});var o=r(9926),a=e([o]);let i=(o=(a.then?(await a)():a)[0]).z.object({SUPABASE_URL:o.z.string().url(),SUPABASE_SERVICE_ROLE_KEY:o.z.string(),SUPABASE_ANON_KEY:o.z.string(),DB_PROVIDER:o.z.literal("supabase"),NODE_ENV:o.z.enum(["development","production"]).default("production"),PORT:o.z.string().transform(Number).default("3001"),FRONTEND_URL:o.z.string().url().default("http://localhost:5173")}).safeParse({SUPABASE_URL:process.env.SUPABASE_URL,SUPABASE_SERVICE_ROLE_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhY2xsand2c2ljZXpta2pubGJtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDAyOTc3MiwiZXhwIjoyMDU5NjA1NzcyfQ.qAwl1_vgAK8qMv44dOWPoZ6u_w5PqwGEdRmOgXeKJbY",SUPABASE_ANON_KEY:process.env.SUPABASE_ANON_KEY,DB_PROVIDER:process.env.DB_PROVIDER,NODE_ENV:"production",PORT:process.env.PORT,FRONTEND_URL:process.env.FRONTEND_URL});if(!i.success)throw console.error("❌ Invalid environment variables:\n",Object.entries(i.error.flatten().fieldErrors).map(([e,s])=>`${e}: ${s?.join(", ")}`).join("\n")),Error("Invalid environment variables");let n=i.data;t()}catch(e){t(e)}})},2693:(e,s,r)=>{r.d(s,{E:()=>n});var t=r(8355);let o=e=>e?e.trim().toLowerCase().replace(/[\u200B\u200D\u200C\uFEFF-]/g,""):"",a=(e,s)=>o(e)===o(s),i=async(e,s,r,i)=>{if(!(0,t.b6)(r))throw Error("Invalid clue sequence");if(!Date.parse(i))throw Error("Invalid start_time format");let n=o(e),l=o(s),d=a(e,s),u=function(e,s){let r=[];for(let t=0;t<e.length;t++){if(t<s.length&&e[t]===s[t]){r.push(t);continue}s.includes(e[t])&&r.push(t)}return r}(n,l),c=u.length>0,g=[...r];if(!d){let e=function(e){for(let s of t.DD)if(!e.includes(s))return s;return null}(r);e&&g.push(e)}let m=d||g.length===t.DD.length;return{isCorrect:d,guess:n,isFuzzy:c,fuzzyPositions:u,gameOver:m,revealedClues:g,score:null}},n=async(e,s,r)=>{if("object"==typeof e){let{guess:t,start_time:o}=e;if(!s||!r||!o)throw Error("Missing required parameters for submitGuess");return i(t,s,r,o)}if(!s||!r)throw Error("Missing required parameters for submitGuess");throw Error("Legacy parameter format is no longer supported")}},9462:(e,s,r)=>{r.a(e,async(e,t)=>{try{r.d(s,{Y0:()=>n});var o=r(2885),a=r(9085),i=e([a]);a=(i.then?(await i)():i)[0];let l=(0,o.createClient)(a.O.SUPABASE_URL,a.O.SUPABASE_SERVICE_ROLE_KEY);async function n(e){try{let{data:s,error:r}=await l.rpc("ensure_player_exists",{p_id:e});if(r)throw console.error("[ensurePlayerExists] Failed to ensure player:",r),r;return s}catch(e){throw console.error("[ensurePlayerExists] Unexpected error:",e),e}}t()}catch(e){t(e)}})},7153:(e,s)=>{var r;Object.defineProperty(s,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(r||(r={}))},1802:(e,s,r)=>{e.exports=r(145)}};var s=require("../../webpack-api-runtime.js");s.C(e);var r=s(s.s=141);module.exports=r})();