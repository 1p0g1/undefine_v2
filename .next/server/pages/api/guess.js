"use strict";(()=>{var e={};e.id=462,e.ids=[462],e.modules={37:e=>{e.exports=import("uuid")},212:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{default:()=>l});var a=s(3939),n=s(2744),o=s(37),i=e([n,o]);[n,o]=i.then?(await i)():i;let d=(0,a.createClient)(n._.SUPABASE_URL,n._.SUPABASE_SERVICE_ROLE_KEY);async function l(e,t){if(t.setHeader("Access-Control-Allow-Credentials","true"),t.setHeader("Access-Control-Allow-Origin","*"),t.setHeader("Access-Control-Allow-Methods","POST,OPTIONS"),t.setHeader("Access-Control-Allow-Headers","X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, player-id, Player-Id, playerId, playerid"),"OPTIONS"===e.method)return void t.status(200).end();if("POST"!==e.method)return t.status(405).json({error:"Method not allowed",details:"Only POST requests are allowed"});try{let s="";await new Promise(t=>{e.on("data",e=>{s+=e.toString()}),e.on("end",()=>t())});let{gameId:r,guess:a,playerId:n}=JSON.parse(s);if(!r||!a||!n)return t.status(400).json({error:"Missing required fields",details:"gameId, guess, and playerId are required"});if(!(0,o.validate)(n))return t.status(400).json({error:"Invalid player ID",details:"player_id must be a valid UUID"});if("string"!=typeof a||!a.trim())return t.status(400).json({error:"Invalid guess",details:"guess must be a non-empty string"});let{data:i,error:l}=await d.from("game_sessions").select("*").eq("id",r).single();if(l||!i)return t.status(404).json({error:"Game session not found",details:l?.message});let{data:u,error:_}=await d.from("words").select("*").eq("id",i.word_id).single();if(_||!u)return t.status(404).json({error:"Word not found",details:_?.message});let g=a.toLowerCase()===u.word.toLowerCase(),c=!g&&a.toLowerCase().includes(u.word.toLowerCase()),p=c?Array.from({length:u.word.length},(e,t)=>t):[],m=[...i.guesses||[],a],f=g||m.length>=6,w=f?Math.floor((Date.now()-new Date(i.start_time).getTime())/1e3):null,{error:y}=await d.from("game_sessions").update({guesses:m,is_complete:f,is_won:g,completion_time_seconds:w}).eq("id",r);if(y)return t.status(500).json({error:"Failed to update game session",details:y.message});let{data:A,error:P}=await d.from("user_stats").select("games_played,games_won,current_streak,longest_streak,total_guesses,average_guesses_per_game,total_play_time_seconds").eq("player_id",n).single();if(P)return t.status(500).json({error:"Failed to fetch stats",details:P.message});if(f){let e={games_played:(A.games_played||0)+1,games_won:g?(A.games_won||0)+1:A.games_won||0,current_streak:g?(A.current_streak||0)+1:0,longest_streak:g?Math.max(A.longest_streak||0,(A.current_streak||0)+1):A.longest_streak||0,total_guesses:(A.total_guesses||0)+m.length,average_guesses_per_game:((A.total_guesses||0)+m.length)/((A.games_played||0)+1),total_play_time_seconds:(A.total_play_time_seconds||0)+(w||0),last_played_word:u.word,updated_at:new Date().toISOString()},{error:s}=await d.from("user_stats").update(e).eq("player_id",n);if(s)return console.error("[api/guess] Failed to update user stats:",s),t.status(500).json({error:"Failed to update user stats",details:s.message});let{error:r}=await d.from("scores").insert([{player_id:n,word_id:u.id,guesses_used:m.length,completion_time_seconds:w,was_correct:g,submitted_at:new Date().toISOString()}]);return r&&console.error("[api/guess] Failed to create score entry:",r),t.status(200).json({isCorrect:g,guess:a,isFuzzy:c,fuzzyPositions:p,gameOver:f,revealedClues:[],usedHint:!1,score:null,stats:{games_played:e.games_played,games_won:e.games_won,current_streak:e.current_streak,longest_streak:e.longest_streak}})}return t.status(200).json({isCorrect:g,guess:a,isFuzzy:c,fuzzyPositions:p,gameOver:f,revealedClues:[],usedHint:!1,score:null,stats:{games_played:A.games_played??0,games_won:A.games_won??0,current_streak:A.current_streak??0,longest_streak:A.longest_streak??0}})}catch(e){return console.error("[api/guess] Unexpected error:",e),t.status(500).json({error:"Unexpected error",details:e instanceof Error?e.message:"Unknown error"})}}r()}catch(e){r(e)}})},2744:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.d(t,{_:()=>i});var a=s(2971),n=e([a]);let o=(a=(n.then?(await n)():n)[0]).z.object({SUPABASE_URL:a.z.string().url("Invalid Supabase URL"),SUPABASE_SERVICE_ROLE_KEY:a.z.string().min(1,"Supabase service role key is required"),SUPABASE_ANON_KEY:a.z.string().min(1,"Supabase anon key is required"),JWT_SECRET:a.z.string().min(1,"JWT secret is required"),DB_PROVIDER:a.z.literal("supabase").describe('Must be "supabase"'),NODE_ENV:a.z.enum(["development","production","test"]).default("development"),PORT:a.z.string().transform(Number).default("3001")}),i=function(){try{return o.parse(process.env)}catch(e){if(e instanceof a.z.ZodError){let t=e.issues.map(e=>`${e.path.join(".")}: ${e.message}`).join("\n");throw Error(`Invalid server environment variables:
${t}`)}throw e}}();r()}catch(e){r(e)}})},2946:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{config:()=>u,default:()=>d,routeModule:()=>_});var a=s(3480),n=s(8667),o=s(6435),i=s(212),l=e([i]);i=(l.then?(await l)():l)[0];let d=(0,o.M)(i,"default"),u=(0,o.M)(i,"config"),_=new a.PagesAPIRouteModule({definition:{kind:n.A.PAGES_API,page:"/api/guess",pathname:"/api/guess",bundlePath:"",filename:""},userland:i});r()}catch(e){r(e)}})},2971:e=>{e.exports=import("zod")},3480:(e,t,s)=>{e.exports=s(5600)},3939:e=>{e.exports=require("@supabase/supabase-js")},5600:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6435:(e,t)=>{Object.defineProperty(t,"M",{enumerable:!0,get:function(){return function e(t,s){return s in t?t[s]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,s)):"function"==typeof t&&"default"===s?t:void 0}}})},8667:(e,t)=>{Object.defineProperty(t,"A",{enumerable:!0,get:function(){return s}});var s=function(e){return e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE",e.IMAGE="IMAGE",e}({})}};var t=require("../../webpack-api-runtime.js");t.C(e);var s=t(t.s=2946);module.exports=s})();